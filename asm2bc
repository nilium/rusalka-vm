#!/usr/bin/env ruby
###############################################################################
#  Copyright (c) 2013 Noel Raymond Cower.                                     #
#                                                                             #
#  This file is part of Rusalka VM.                                           #
#                                                                             #
#  Rusalka VM is free software: you can redistribute it and/or modify         #
#  it under the terms of the GNU General Public License as published by       #
#  the Free Software Foundation, either version 3 of the License, or          #
#  (at your option) any later version.                                        #
#                                                                             #
#  Rusalka VM is distributed in the hope that it will be useful,              #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of             #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              #
#  GNU General Public License for more details.                               #
#                                                                             #
#  You should have received a copy of the GNU General Public License          #
#  along with Rusalka VM.  If not, see <http://www.gnu.org/licenses/>.        #
###############################################################################


require './lexer.rb'
require 'digest'
require 'securerandom'
require 'set'


BYTECODE_VERSION = 8
MAX_NONVOLATILE_GP_REGISTERS = 8
FIRST_NONVOLATILE_GP_REGISTER = 4
LAST_GP_REGISTER = (FIRST_NONVOLATILE_GP_REGISTER + MAX_NONVOLATILE_GP_REGISTERS) - 1


module Colors
  class <<self
    attr_accessor :colored
  end

  self.colored = true

  GREY     = '[30;m'
  RED      = '[31;m'
  GREEN    = '[32;m'
  YELLOW   = '[33;m'
  BLUE     = '[34;m'
  PURPLE   = '[35;m'
  CYAN     = '[36;m'
  WHITE    = '[37;m'
  NO_COLOR = '[0;m'

  def self.white(*bits)  ; "#{self.colored  ? WHITE   : '' }#{ bits.join }#{ self.colored ? NO_COLOR : '' }" ; end
  def self.grey(*bits)   ; "#{self.colored  ? GREY    : '' }#{ bits.join }#{ self.colored ? NO_COLOR : '' }" ; end
  def self.red(*bits)    ; "#{self.colored  ? RED     : '' }#{ bits.join }#{ self.colored ? NO_COLOR : '' }" ; end
  def self.green(*bits)  ; "#{self.colored  ? GREEN   : '' }#{ bits.join }#{ self.colored ? NO_COLOR : '' }" ; end
  def self.yellow(*bits) ; "#{self.colored  ? YELLOW  : '' }#{ bits.join }#{ self.colored ? NO_COLOR : '' }" ; end
  def self.blue(*bits)   ; "#{self.colored  ? BLUE    : '' }#{ bits.join }#{ self.colored ? NO_COLOR : '' }" ; end
  def self.purple(*bits) ; "#{self.colored  ? PURPLE  : '' }#{ bits.join }#{ self.colored ? NO_COLOR : '' }" ; end
  def self.cyan(*bits)   ; "#{self.colored  ? CYAN    : '' }#{ bits.join }#{ self.colored ? NO_COLOR : '' }" ; end
end


def logical_xor(a, b)
  args = [a, b]
  args.any? && !args.all?
end


###############################################################################
#  Parsing vm_instructions.h                                                  #
###############################################################################

module Op

  class << self
    attr_accessor :license
  end

  RegisterArg = Struct.new(:argtype, :kind)
  OPS = {}
  OP_ARGS = {}
  OP_NAMES = []
  OP_PACKS = {}
  OP_HAS_LITFLAG = {}

  module Loading

    File.open('vm_instructions.h', 'r') do |io|
      until io.readline.chomp == '// BEGIN INSTRUCTIONS' ; end

      until (line = io.readline.strip) == '// END INSTRUCTIONS'
        next if line.start_with? '//'
        instr_string = line[/(?<=INSTRUCTION\().+?(?=\))/]
        next unless instr_string
        argv = instr_string.split(',').each(&:strip!)

        codename = argv.shift.to_sym
        asm_name = argv.shift.to_sym
        opcode = argv.shift.to_i
        argc = argv.shift.to_i
        argv.map!(&:to_sym)

        ::Op.const_set(codename, opcode)
        ::Op::OP_NAMES << asm_name.downcase.tap do |name|
          ::Op::OPS[name] = opcode
          ::Op::OP_PACKS[name] = 'E' * argc
          ::Op::OP_ARGS[name] = argv
          ::Op::OP_HAS_LITFLAG[name] = argv[-1] == :litflag
        end.to_s

      end
    end

  end
end


###############################################################################
#  File loading / lexing                                                      #
###############################################################################

def file_contents(file)
  File.open(file, 'r') { |io| io.read }
end


def lex(source)
  lexer = Lexer.new
  lexer.skip_comments = true
  lexer.skip_newlines = false
  lexer.run(source).tokens
end


POS_INT_LITS = [:integer_lit, :integer_exp_lit, :hex_lit, :bin_lit]
INT_LITS = [:minus] | POS_INT_LITS
FLOAT_LITS = [:float_lit, :float_exp_lit, :minus]
STRING_LITS = [:double_string_lit]
CHAR_LITS = [:single_string_lit]


Unit = Struct.new(:name, :prefix)
Instruction = Struct.new(:name, :args)
DefDataStmt = Struct.new(:name, :string, :mangled)
RegisterRef = Struct.new(:index)
AnonDataStmt = Struct.new(:id, :prefix)
DataRef = Struct.new(:name, :lookup)
LabelRef = Struct.new(:label)
LabelStmt = Struct.new(:label)


class RegisterRef
  def to_i ; index ; end
  def to_f ; index.to_f ; end
end


REG_IP  = RegisterRef[0].freeze
REG_EBP = RegisterRef[1].freeze
REG_ESP = RegisterRef[2].freeze
REG_RP  = RegisterRef[3].freeze


class Label
  attr_reader :name, :mangled, :kind

  class << self
    alias_method :[], :new

    def mangle_sym(context, sym, kind)
      case kind
      when :local, :at then :"#{context}__#{sym}__"
      when :export, :dot then :"__#{sym}__"
      when :import, :caret then sym
      else raise "invalid symbol kind"
      end
    end
  end

  def kind_char
    case kind
    when :export then '.'
    when :import then '^'
    when :local then '@'
    end
  end

  def initialize(prefix, name, kind)
    if name.bytesize > 65535
      raise "Label names may not be greater than 65,535 characters in length"
    end

    @name = name
    @kind = case kind
            when :dot, :export then :export
            when :at, :local then :local
            when :caret, :import then :import
            else raise "invalid label kind: #{kind}"
            end
    @mangled = self.class.mangle_sym(prefix, name, @kind)
  end

  def to_s
    inspect
  end

  def inspect
    "#{name}:#{mangled}<#{kind}>"
  end

  def hash
    mangled.hash
  end

  def eql?(other)
    other.kind_of?(Label) && mangled == other.mangled
  end
end


###############################################################################
#  The Parser                                                                 #
###############################################################################

class Parser

  # The prefix is any prefix used for a specific file when mangling local
  # names. At the moment, it's a SHA256 hash of the file being parsed. Must
  # be assigned before calling run(...).
  attr_accessor :prefix
  attr_reader :instructions
  attr_reader :labels
  attr_reader :string_mappings
  attr_reader :data_mappings
  attr_reader :data

  # Returns a block selecting for the given kinds
  def select_kind(*kinds, &block)
    -> (obj, *args) do
      kinds.any? do |klass|
        obj.kind_of?(klass)
      end && (block.nil? || block[obj])
    end
  end

  def unique_uuid
    result =
      loop do
        generated = SecureRandom.uuid
        next if @uuids.include? generated
        break generated
      end.tap { |k| @uuids << k }

    str = result.split('-').map { |i| i.to_i(16).to_s(36) }.join
    str[/^\d/] ? "_#{str}" : str
  end


  def initialize
    @uuids           = Set.new
    @data            = []
    @prefix          = nil
    @instructions    = []
    @labels          = {}
    @externs         = {}
    @label_mappings  = {}
    @string_mappings = {}
    @data_mappings   = {}
    @import_count    = 0
    @let_names       = nil
    @let_unwinds     = nil
    @let_refs        = nil
    @close_stack     = []
  end

  # Looks up a reference and returns the value.
  def lookup(ref, no_export = 0)
    case ref
    when RegisterRef
      ref.index
    when LabelRef
      # All non-import labels should have assigned instruction values by this
      # point.
      @label_mappings[ref.label.mangled] ||=
        case ref.label.kind
        when :import then -(@import_count += 1)
        when :export then return @externs[ref.label.mangled] || no_export
        else error "Unmatched labelref"
        end
    when DataRef then @string_mappings[ref.lookup]
    else ref
    end
  end

  def is_extern?(ref)
    ref.kind_of?(LabelRef) && @externs.include?(ref.label.mangled)
  end


  #############################################################################
  #  Try-and-fail Reading                                                     #
  #############################################################################

  def mark
    @marks << @index
    self
  end

  def unmark
    @marks.pop
    self
  end

  def reset
    if @index == @marks.last
      @marks.pop
      return self
    end

    @input.rewind
    @current = nil
    @column = 0
    @line = 0
    @index = 0

    # If there's a better way of doing this, I haven't found it.
    reset_to = @marks.pop
    (0 ... reset_to).each { read } if reset_to && reset_to > 0
    self
  end

  # For testing sequences of tokens, wrap calls in maybe? to reset to the
  # starting token on failure. Returning a nil value from the block is failure,
  # otherwise it's considered success.
  #
  # If only testing for a single token's acceptance for a value, then an
  # enclosing `maybe? { ... }` isn't necessary, though won't hurt.
  def maybe?
    raise "No block given" unless block_given?
    mark
    yield.tap do |result|
      if !result.nil?
        unmark
      else
        reset
      end
    end
  end


  #############################################################################
  #  Parsed Types                                                             #
  #############################################################################

  # $INTEGER
  def arg_num
    maybe? do
      accept(:dollar) && accept(:integer_lit, distance: 0) do |tok|
        RegisterRef[FIRST_NONVOLATILE_GP_REGISTER + tok.to_i]
      end
    end
  end

  # %INTEGER
  def register
    maybe? do
      accept(:percent) && accept(:integer_lit, distance: 0) do |tok|
        RegisterRef[tok.to_i]
      end
    end || arg_num
  end

  def char
    accept(CHAR_LITS) do |tok|
      data = tok.value
      raise "Character literals may only cover a single char" if data.length != 1
      data.encode(Encoding::UTF_8).codepoints[0]
    end
  end

  # String literals
  def string
    accept(STRING_LITS) do |tok|
      data = tok.value
      is_dupe = @data_mappings.include?(data)
      id = @data_mappings[data] ||= @data_mappings.length + 1
      stmt = AnonDataStmt[id, :"data_#{unique_uuid}"]
      @string_mappings[stmt] = id
      unless is_dupe
        defstmt = DefDataStmt[stmt.prefix, data, mangle_data_name(stmt.prefix)]
        unit_idx = @data.index { |obj| obj.kind_of?(Unit) && obj.prefix == @prefix }
        @data.insert(unit_idx + 1, defstmt)
      end
      DataRef[stmt, stmt]
    end
  end

  # Number literals
  def number(distance: nil)
    accept(FLOAT_LITS, &:to_f) || accept(INT_LITS, &:to_i)
  end

  # [ NUMERICS* ]
  def bitset
    maybe? do
      break unless accept :bracket_open

      bits = 0
      until accept :bracket_close
        bitnum = (bitwise_not(:numeric) || negative(:numeric) || numeric || register || error).to_i
        warn "Repeating bitnums in bitset" if bits[bitnum] != 0
        bits |= 1 << bitnum
      end

      bits
    end
  end

  # ~ID
  def data_ref
    maybe? do
      accept(:tilde) && accept(:id, distance: 0) do |tok|
        name = tok.value.to_sym
        DataRef[name, mangle_data_name(name)]
      end
    end
  end

  # Negates the next value read by sym
  def negative(sym = :value)
    accept(:minus) do |tok|
      (peek.position.column == tok.position.column + 1 && -self.send(sym)) || error
    end
  end

  # Performs a 32-bit bitwise not on the next value read by sym
  def bitwise_not(sym = :value)
    accept(:tilde) do |tok|
      (peek.position.column == tok.position.column + 1 && ((~self.send(sym)) & 0xFFFFFFFF)) || error
    end
  end

  # Numerics
  def numeric
    named_register || named_constant || number || bitset
  end

  # ^NAME
  def import
    maybe? do
      accept(:caret) && accept(:id, distance: 0) do |tok|
        LabelRef[Label[@prefix, tok.value, :import]].tap do |ref|
          @labels[ref.label.name] = ref.label
        end
      end
    end
  end

  # .NAME
  # @NAME
  def label_name
    maybe? do
      kind = accept(:dot, :at) do |k|
        case k.kind
        when :dot then :export
        when :at then :local
        end
      end

      break unless kind
      name = accept(:id, distance: 0, &:value)

      yield kind, name if kind && name
    end
  end

  # label_name
  def label_ref
    label_name { |kind, name| LabelRef[Label[@prefix, name, kind]] }
  end

  def register_label_statement(stmt)
    if @label_mappings.include?(stmt.label.mangled)
      warn "Duplicate label: #{stmt.label.name}"
    end

    @label_mappings[stmt.label.mangled] = @instructions.length
    @labels[stmt.label.mangled] = stmt.label
    @data << stmt unless @data.include?(stmt)

    stmt
  end

  # label_name TERM
  def label
    label_name do |kind, name|
      unless accept(:colon, distance: 0)
        warn "Expected colon after reading label name #{name}"
        return nil
      end
      register_label_statement LabelStmt[Label[@prefix, name, kind]]
    end
  end

  MEMOP_TYPES = {
    'MEMOP_UINT8'   => 0,
    'MEMOP_INT8'    => 1,
    'MEMOP_UINT16'  => 2,
    'MEMOP_INT16'   => 3,
    'MEMOP_UINT32'  => 4,
    'MEMOP_INT32'   => 5,
    'MEMOP_UINT64'  => 6,
    'MEMOP_INT64'   => 7,
    'MEMOP_FLOAT32' => 8,
    'MEMOP_FLOAT64' => 9,
    'DBL_EPSILON'   => Float::EPSILON,
    'DBL_MIN'       => Float::MIN,
    'DBL_MAX'       => Float::MAX,
    'DBL_NAN'       => Float::NAN,
    'DBL_POS_INF'   => Float::INFINITY,
  }

  def named_constant
    accept(:id, content: MEMOP_TYPES.keys) { |tok| MEMOP_TYPES[tok.value] }
  end

  # ip
  # ebp
  # esp
  # rp
  # any let-named variable
  def named_register
    accept(:id, content: ['ip', 'ebp', 'esp', 'rp'] + @let_names) do |tok|
      name = tok.value
      case name
      when 'ip'  then REG_IP
      when 'ebp' then REG_EBP
      when 'esp' then REG_ESP
      when 'rp'  then REG_RP
      else @let_refs[name]
      end
    end
  end

  # Any valid argument to an instruction
  def value
    data_ref ||
    negative ||
    bitwise_not ||
    register ||
    label_ref ||
    import ||
    numeric ||
    char ||
    string ||
    error
  end

  def swallow_sentinels
    next while accept(:newline, :semicolon)
    self
  end

  def swallow_newlines
    next while accept(:newline)
    self
  end

  # Reads a line
  def line
    swallow_sentinels
    unless eof?
      next_data = (label || statement || error)
      @data << next_data unless @data.last.__id__ == next_data.__id__
      next_data
    end
  end

  # EOF | "\n" | ";"
  def terminator
    !!(eof? || accept(:newline, :semicolon) || (!@close_stack.empty? && accept(@close_stack.last, consume: false)))
  end

  def mangle_data_name(name)
    :"#{@prefix}__#{name}"
  end

  # Data statements
  # defdata NAME STRING TERM
  def defdata
    maybe? do
      name = accept(:id, content: 'defdata') && accept(:id, &:value)
      break unless name
      mangled = mangle_data_name(name)
      accept(STRING_LITS) do |t|
        data = t.value
        stmt = DefDataStmt[name, data, mangle_data_name(name)] if terminator
        break unless stmt

        if @string_mappings.include?(mangled)
          warn "Data with name '#{mangled}' already defined"
        end

        @string_mappings[mangled] =
          (@data_mappings[data] ||= @data_mappings.length + 1)

        stmt
      end
    end
  end

  def add_instruction(instr)
    @instructions << instr
    @data << instr
    instr
  end

  def generate_instruction(name, *args)
    add_instruction Instruction[name, args]
  end

  RESERVED_NAMES = ['ip', 'ebp', 'esp', 'rp', *MEMOP_TYPES.keys]

  def generate_unwind!(down, force)
    (!down ? @let_unwinds.reverse : @let_unwinds).each do |unwind|
      unwind[down, force]
    end
  end

  def with_named_variables(names, preserve: :volatiles, skip_final_unwind: false)
    name_regnum   = FIRST_NONVOLATILE_GP_REGISTER + @let_names.length
    preserve_all  = preserve == :all
    preserve_none = preserve == :none

    names.each_with_index do |name, index; ref, regnum|
      regnum = name_regnum + index
      ref = RegisterRef[regnum]
      @let_refs[name] = ref
    end

    @let_names += names
    unwind = -> (down, force = false; instr_name, ordered_names) do
      return unless force || !preserve_none

      instr_name = down ? :pop : :push
      ordered_names = down ? names.reverse : names

      ordered_names.each do |name; ref|
        ref = @let_refs[name]
        if preserve_all || ref.index > LAST_GP_REGISTER
          generate_instruction(instr_name, ref)
        end
      end
    end

    @let_unwinds.unshift unwind
    unwind[false, false]


    begin
      result = yield
    ensure
      @let_names.pop(names.length)

      raise "Invalid unwind proc popped" unless @let_unwinds.shift == unwind
      unwind[true, false] unless skip_final_unwind

      names.reverse.each do |name|
        ref = @let_refs[name]
        raise "Consistency error: named register became undefined" unless ref
        @let_refs.delete name
      end
    end

    result
  end

  def generator(*args, named: nil, **kwargs, &block)
    raise "No proc name or block given" unless !named.nil? || block_given?
    if named.nil?
      yield(self, *args)
    else
      args << kwargs unless kwargs.empty?
      self.__send__(named, *args, &block)
    end
    @data.last
  end

  def name_list(output_ary: nil, &process)
    swallow_newlines
    names = output_ary || []
    next while accept(:id) do |token|
      name = token.value
      process[name] if block_given?
      names << name
      swallow_newlines
      accept(:comma) { swallow_newlines }
    end
    names
  end

  def run_until
    r = nil
    swallow_sentinels
    until yield
      r = line
      swallow_sentinels
    end
    swallow_sentinels
    r
  end

  def let_block
    accept(:id, content: 'let') do
      mode =
        case
        when !!accept(:bang, distance: 0) then :all
        when !!accept(:asterisk, distance: 0) then :none
        else :volatiles
        end

      names = []

      unless accept(:curl_open)
        name_list(output_ary: names) do |name|
          raise "Name #{tok.value} is reserved" if RESERVED_NAMES.include? name
          raise "Name #{tok.value} already defined" if @let_refs.include? name
        end

        swallow_newlines
      end

      raise "Expected opening brace" unless accept(:curl_open)

      generator(names, named: :with_named_variables, preserve: mode) do
        @close_stack << :curl_close
        run_until { accept(:curl_close) }
        @close_stack.pop
      end
    end
  end

  CONDITIONAL_OPS = {
    :equality       => [:eq, 1],          # EQ arg0 arg1 1; JUMP @__end_jump__
    :not_equal      => [:eq, 0],          # EQ arg0 arg1 0; JUMP @__end_jump__
    :greater_equal  => [:lt, 0],          # LT arg0 arg1 0; JUMP @__end_jump__
    :greater_than   => [:le, 0],          # LE arg0 arg1 0; JUMP @__end_jump__
    :less_than      => [:lt, 1],          # LT arg0 arg1 1; JUMP @__end_jump__
    :lesser_equal   => [:le, 1]           # LE arg0 arg1 1; JUMP @__end_jump__
  }

  def conditional
    accept(:id, content: ['if', 'for']) do |tok|
      label_pre       = tok.value
      is_loop         = label_pre == 'for'
      invert          = !!accept(:bang)
      arg0            = value
      is_block        = false
      loop_label_id   = nil
      loop_jump_instr = nil

      if is_loop
        loop_label_id = Label[@prefix, "__#{label_pre}_start_#{unique_uuid}", :local]
        register_label_statement(LabelStmt[loop_label_id])
        loop_jump_instr = Instruction[:jump, [LabelRef[loop_label_id], 0x1]]
      end

      comp_instr = accept(CONDITIONAL_OPS.keys) do |tok|
        name, flag = CONDITIONAL_OPS[tok.kind]
        arg1       = self.value
        swallow_newlines
        is_block   = !!accept(:curl_open)

        flag = 1 - flag if logical_xor(is_block || is_loop, invert)

        lits = 0
        lits |= 0x1 unless arg0.kind_of?(RegisterRef)
        lits |= 0x2 unless arg1.kind_of?(RegisterRef)

        generate_instruction(name, arg0, arg1, flag, lits)
      end

      generator do
        @close_stack << :curl_close if is_block

        if is_block || is_loop
          label_id = Label[@prefix, "__#{label_pre}_end_#{unique_uuid}", :local]
          generate_instruction(:jump, LabelRef[label_id], 0x1)

          swallow_sentinels

          if is_block
            run_until { accept(:curl_close) }
          else
            line
          end

          if is_loop
            add_instruction loop_jump_instr
          end

          register_label_statement(LabelStmt[label_id])
        else
          instruction || error("Expected instruction")
        end

        @close_stack.pop if is_block
      end
    end
  end

  def function_def
    accept(:id, content: 'function') do
      name = swallow_newlines && accept(:id, &:value)
      swallow_newlines && accept(:paren_open) || error("Expected opening parenthesis for arguments")
      arg_names = name_list
      local_names = []
      name_list(output_ary: local_names) if swallow_newlines && accept(:semicolon)
      swallow_newlines && accept(:paren_close) || error("Expected closing parenthesis for arguments")

      swallow_newlines && accept(:curl_open) || error("Expected opening brace")

      func_label = Label[@prefix, name, :export]
      register_label_statement LabelStmt[func_label]

      generator(arg_names + local_names, named: :with_named_variables, preserve: :none, skip_final_unwind: true) do
        arg_names.each do |name|
          generate_instruction :pop, @let_refs[name]
        end

        @close_stack << :curl_close
        run_until { accept(:curl_close) }
        @close_stack.pop
      end
    end
  end

  # Instruction and data statements
  def statement
    defdata || function_def || let_block || conditional || instruction
  end

  # OPNAME VALUE* TERM
  def instruction
    maybe? do
      name = accept(:id, content: Op::OP_NAMES, &:value)
      break unless name
      name = name.to_sym
      optional_flag = Op::OP_ARGS[name].last == :litflag
      num_args = Op::OP_PACKS[name].length - (optional_flag ? 1 : 0)
      args = Array.new(num_args) { value }

      done = false
      if optional_flag
        if !(done = terminator)
          args << value
        else
          args << Op::OP_ARGS[name].each_with_index.reduce(0) do |bits, packet|
            type, index = *packet
            if type == :input && !args[index].kind_of?(RegisterRef)
              bits | (0x1 << index)
            else
              bits
            end
          end
        end
      end

      generator do
        case name
        when :return  then generate_unwind!(true, false)
        when :call    then generate_unwind!(false, true)
        end
        generate_instruction(name, *args) if done || terminator
        generate_unwind!(true, true) if name == :call
      end
    end
  end


  #############################################################################
  #  Warnings / Errors                                                        #
  #############################################################################

  def error(*msg)
    $stderr.puts "Error when trying to read token: #{msg.join ' '}"
    $stderr.puts peek.inspect
    raise RuntimeError
  end

  def warn(*msgs)
    Kernel.warn(*msgs.map { |k| "[#{@line}:#{@column}] #{k}" })
  end


  #############################################################################
  #  Parser Execution                                                         #
  #############################################################################

  def run(input, filename = 'anonymous')
    @prefix = unique_uuid if @prefix.nil? || @prefix.empty?
    @prefix = "_#{@prefix}" if "0123456789".include?(@prefix[0])
    @data << Unit[filename, @prefix]
    @marks = []
    @index = 0
    @input = input
    @current = nil
    @line = 0
    @column = 0
    @let_names = []
    @let_unwinds = []
    @let_refs = {}
    @close_stack = []
    __run__
  ensure
    @prefix = nil
    @input = nil # don't retain the enumerator
  end

  def __run__
    run_until { eof? }
  end


  #############################################################################
  #  Parser Input                                                             #
  #############################################################################

  def peek
    @input.peek if @input
  rescue StopIteration
    nil
  end

  def read
    raise StopIteration unless @input
    if @current
      @line = @current.position.line + @current.value.count("\n")
      @column =
        if @current.position.line == @line
          @current.position.column + @current.value.length
        else
          @current.value.length - @current.value.rindex("\n")
        end
    end
    @current = @input.next
    @index += 1
    @current
  rescue StopIteration
    @current = nil
    nil
  end

  def eof?
    peek.nil?
  end

  def accept(*tokens, content: nil, distance: nil, consume: true)
    tok = peek
    tokens = tokens.flatten
    result =
      case
      when tok.nil? then nil
      when !tokens.empty? && !tokens.include?(tok.kind) then nil
      when content.kind_of?(Regexp) && content.match(tok.value).nil? then nil
      when content.kind_of?(String) && content != tok.value then nil
      when content.kind_of?(Array) && !content.include?(tok.value) then nil
      when case distance
           when Numeric # columns
           when Hash
             lines, columns = [distance[:lines] || 0, distance[:columns] || 0]
             @line - tok.position.line > lines || @column - tok.position.column > columns
           when Array
             lines, columns = distance
             @line - tok.position.line > lines || @column - tok.position.column > columns
           else false
           end
        nil
      else consume ? read : tok
      end
    if result && block_given?
      yield result
    else
      result
    end
  end


  #############################################################################
  #  Parser Output                                                            #
  #############################################################################

  def data_blocks
    mapped =
      @data_mappings.map do |data, id|
        if data.kind_of? Array
          data = data.last
        end

        [data, id]
      end.sort_by(&:last).map do |data, id|
        "#{[data.bytesize].pack('l<')}#{data}"
      end.join

    "#{[@data_mappings.length].pack('l<')}#{mapped}"
  end

  def filtered_labels(*kinds)
    @labels.to_a.keep_if { |n, l| kinds.include? l.kind }
  end

  def imports_data
    label_data(filtered_labels(:import)) { |_, _, address| -address }
  end

  def exports_data
    label_data(filtered_labels(:export))
  end

  # A list of names indicating those referenced but without addresses.
  def externs_data
    refs = @externs.map do |label, id|
      namedata = label.to_s.encode(Encoding::UTF_8)
      "#{[namedata.bytesize].pack('l<')}#{namedata}"
    end.join

    "#{[@externs.length].pack('l<')}#{refs}"
  end

  def label_data(labels, &sort)
    data =
      labels.map do |name, label|
        [name, label, lookup(LabelRef[label])]
      end.sort_by { |k| sort ? sort[*k] : k[2] }.map do |name, label, address|
        namedata = name.to_s.encode(Encoding::UTF_8)

        if namedata.bytesize > 65535
          raise "Label may not exceed 65,535 characters in length"
        end

        packdata = [address, namedata.bytesize].pack('l<l<')
        "#{packdata}#{namedata}"
      end.join

    "#{[labels.length].pack('l<')}#{data}"
  end

  def instruction_data
    data =
      @instructions.map do |instr|
        opcode = Op::OPS[instr.name]
        raise "Opcode may not be less than 0" if opcode < 0
        raise "Opcode may not be greater than 2^16" if opcode > 0xFFFF
        flags = 0
        args = instr.args.map { |arg| lookup(arg) }
        if ::Op::OP_ARGS[instr.name].last == :litflag
          raise "Litflag must be an integer" if !args.last.kind_of?(Integer)
          raise "Litflag does not fit in 16 bits" if args.last > 0xFFFF
          raise "Litflag may not be less than 0" if args.last < 0
          flags = args.pop & 0xFFFF
        end
        args.map!(&:to_f)
        [opcode, flags, *args].pack('S<S<E*')
      end.join

    "#{[@instructions.length].pack('l<')}#{data}"
  end

  RELOCATION_TABLE_MAP = -> (arg, index) { index }

  def relocation_table(&block)
    raise "No block given" if block.nil?
    data =
      @instructions.each_with_index.map do |instr, instr_index|
        if instr.args.any?(&block)
          refs = instr.args.each_with_index.select { |obj, index| block[obj] }.map!(&:last)
          refs_mask = refs.reduce(0) do |mask, index| mask | (1 << index) end
          [instr_index, refs_mask].pack('l<L<')
        else
          nil
        end
      end.delete_if(&:nil?)

    "#{[data.length].pack('l<')}#{data.join}"
  end

  def arguments_where(&block)
    args = []
    @instructions.each_with_index do |instr, ip|
      matches = instr.args.each_with_index.select do |arg, arg_idx|
        block[arg]
      end.map do |arg, arg_idx|
        [ip, arg_idx, arg]
      end

      args += matches unless matches.empty?
    end
    args
  end

  def label_relocation_table
    relocation_table { |arg| arg.kind_of?(LabelRef) && !lookup(arg, nil).nil? && !@externs.include?(arg.label.mangled) }
  end

  def data_relocation_table
    relocation_table { |arg| arg.kind_of? DataRef }
  end

  def extern_relocation_table
    relocation_table do |arg|
      arg.kind_of?(LabelRef) &&
      arg.label.kind == :export &&
      @externs.include?(arg.label.mangled)
    end
  end

  def id_extern_labels!
    extern_labels = arguments_where do |arg|
      arg.kind_of?(LabelRef) && lookup(arg, nil).nil?
    end

    uniq_externs = extern_labels.map{ |ip, ia, ref| ref }.uniq(&:label)
    uniq_externs.each { |ref|
      next if @externs.include?(ref)
      @externs[ref.label.mangled] = @externs.length
    }
  end

end # Parser


Chunk = Struct.new(:name, :data)


def chunk_size(data)
  # sizeof(name) + sizeof(chunk size) + sizeof(data)
  8 + data.bytesize
end


def write_chunk(name, data, io)
  name = name.to_s
  raise "Chunk name must be exactly 4 bytes in size" unless name.bytesize == 4

  io.write(name)
  io.write([8 + data.bytesize].pack('l<'))
  io.write(data)
end


def write_data(parser, io)
  version_data = [BYTECODE_VERSION].pack('l<')

  chunks = [
    Chunk[:VERS, version_data],
    Chunk[:OFFS, 0],
    Chunk[:INST, parser.instruction_data],
    Chunk[:IMPT, parser.imports_data],
    Chunk[:EXPT, parser.exports_data],
    Chunk[:LREL, parser.label_relocation_table],
    Chunk[:EXTS, parser.externs_data],
    Chunk[:EREL, parser.extern_relocation_table],
    Chunk[:DATA, parser.data_blocks],
    Chunk[:DREL, parser.data_relocation_table],
  ]

  # [chunk count] + [[label, offset], ...]
  chunks[1].data = ([0] + Array.new(chunks.length, [0, 0])).flatten.pack('l<*')

  relative_off = 0
  offsets = chunks.map do |chunk|
    size = chunk_size(chunk.data)
    data = "#{chunk.name}#{[relative_off].pack('l<')}"
    relative_off += size
    data
  end

  chunks[1].data = "#{[offsets.length].pack('l<')}#{offsets.join}"

  chunks.each do |chunk|
    write_chunk(chunk.name, chunk.data, io)
  end

  $stderr.puts "Wrote #{relative_off} bytes"

  nil
end


flags = Struct.new(:print_instrs).new

loop {
  case ARGV.first
  when '--print-instrs' then flags.print_instrs = true
  when '--no-print-instrs' then flags.print_instrs = false
  when '--no-colors' then Colors.colored = false
  when '--colors' then Colors.colored = true
  else break
  end
  ARGV.shift
}

# Print help text if the minimum number of arguments aren't provided.
if ARGV.length < 2
  puts <<-EOS.gsub(/^    /, '')
    asm2bc output input...
     - output may be any file path, or '-' to write to the standard output.
     - input must be one or more named files.

    Options:
      --print-instrs
        Writes the instructions asm2bc has read to the standard error. This
        can be used to debug asm2bc if its output seems to be incorrect --
        handy for bug testing.

    -----------------------------------------------------------------------

    asm2bc (Rusalka VM) Copyright (C) 2014 Noel Cower

    This program comes with ABSOLUTELY NO WARRANTY. This program is free
    software: you can redistribute it and/or modify it under the terms of
    the GNU General Public License as published by the Free Software
    Foundation, either version 3 of the License, or (at your option) any
    later version.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
  EOS

  exit 1
end

hasher = Digest::SHA256.new
parser = Parser.new
output_file = ARGV.shift

ARGV.each do |file|
  unit_name     = (file == '-') ? 'anonymous' : file
  contents      = (file == '-') ? $stdin.read() : file_contents(file)
  tokens        = lex(contents)
  unit_digest   = Digest.hexencode(hasher.digest(contents))
  # parser.prefix = unit_digest
  parser.run(tokens.each, file)
end

parser.id_extern_labels!

def mul_of(x, n)
  ([(x.to_f / n).ceil, 1].max * n)
end

def rpad_to(str, len)
  "#{' ' * (len - str[0].length)}#{str[1]}"
end

if flags.print_instrs

  max_arg_columns = []

  max_name_len = Op::OPS.map { |k, v| k.length }.max + 1
  args = parser.instructions.map { |i|
    i.args.each_with_index.map { |a, j|
      a =
        if Op::OP_ARGS[i.name][j] == :litflag && a.kind_of?(Numeric)
          value = "0b#{parser.lookup(a).to_i.to_s(2)}"
          [value, Colors.red(value)]
        elsif a.kind_of?(LabelRef)
          value = parser.lookup(a).to_s
          comment = "/* #{
              a.label.kind_char
            }#{
              a.label.name
            }#{
              ' (extern)' if parser.is_extern?(a)
            } => */"

          [
            "#{comment} #{value}",
            "#{Colors.white comment} #{Colors.yellow value}"
          ]
        elsif a.kind_of?(DataRef)
          value = parser.lookup(a).inspect.to_s
          comment = "/* ~#{
              case a.name
              when AnonDataStmt then a.name.prefix
              else a.name
              end
            } => */"
          [
            "#{comment} #{value}",
            "#{Colors.white comment} #{Colors.blue value}"
          ]
        elsif a.kind_of?(RegisterRef)
          nocol =
            case a.index
            when 0 then 'ip'
            when 1 then 'ebp'
            when 2 then 'esp'
            when 3 then 'rp'
            else "%#{a.index}"
            end
          [nocol, Colors.green(nocol)]
        else
          nocol = parser.lookup(a).to_s
          [nocol, Colors.cyan(nocol)]
        end

      max_arg_columns[j] = max_arg_columns.fetch(j, []) << a[0].length

      a
    }
  }
  max_arg_columns.map! { |k| mul_of(k.max, 4) }
  args.each { |ap| ap.map!.each_with_index { |s, j| rpad_to(s, max_arg_columns[j]) } }
  max_line_no_length = ([parser.instructions.length.to_s.length / 4, 3].max) * 4
  instr_index = 0
  parser.data.each_with_index do |datum, index|
    case datum
    when Unit
      $stderr.write "\n\n" if index != 0
      $stderr.puts Colors.white "/#{'*' * 99}"
      $stderr.puts Colors.white "    Unit: #{datum.name} (#{datum.prefix})"
      $stderr.puts "#{Colors.white "#{'*' * 99}/"}\n\n"
    when DefDataStmt
      stmt = datum
      $stderr.puts Colors.white "// Data: #{stmt.mangled}"
      $stderr.puts "#{Colors.purple "defdata"} #{Colors.blue stmt.name} #{Colors.cyan stmt.string.inspect}"
    when Instruction
      instr = datum
      $stderr.write "    #{Colors.white "/* #{instr_index} */".ljust(max_line_no_length)}"
      $stderr.write "#{Colors.purple instr.name.to_s.ljust(max_name_len)}"
      $stderr.write " #{args[instr_index].join '  '}" unless args[instr_index].empty?
      $stderr.write "\n"
      instr_index += 1
    when LabelStmt
      $stderr.write "\n" if index != 0
      label = datum.label
      $stderr.puts Colors.white "// #{label.mangled}"
      $stderr.write Colors.yellow(
        "#{case label.kind
           when :export then '.'
           when :local then '@'
           when :import then '^' # never occurs
           end}#{label.name}:")
      $stderr.write "\n"
    else
    end
  end
end

case output_file
when '-' then write_data(parser, $stdout)
else File.open(output_file, 'w') { |io| write_data(parser, io) }
end
