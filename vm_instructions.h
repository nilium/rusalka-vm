#ifndef VM_LICENSE
#define VM_LICENSE(ARGS...)
#endif
VM_LICENSE(
 "Copyright (c) 2013 Noel Raymond Cower.",
 "",
 "This file is part of Rusalka VM.",
 "",
 "Rusalka VM is free software: you can redistribute it and/or modify",
" it under the terms of the GNU General Public License as published by",
" the Free Software Foundation, either version 3 of the License, or",
" (at your option) any later version.",
 "",
 "Rusalka VM is distributed in the hope that it will be useful,",
" but WITHOUT ANY WARRANTY; without even the implied warranty of",
" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
" GNU General Public License for more details.",
 "",
 "You should have received a copy of the GNU General Public License",
" along with Rusalka VM.  If not, see <http://www.gnu.org/licenses/>."
)

VM_INSTRUCTION( NOP,             NOP,          0,          0     )
VM_INSTRUCTION( ADD_F32,         FADD,         1,          3,    VM_REG(f32, output), VM_REG(f32, input), VM_REG(f32, input) )
VM_INSTRUCTION( ADD_I32,         ADD,          2,          3,    VM_REG(i32, output), VM_REG(i32, input), VM_REG(i32, input) )
VM_INSTRUCTION( ADD_UI32,        UADD,         3,          3,    VM_REG(ui32, output), VM_REG(ui32, input), VM_REG(ui32, input) )
VM_INSTRUCTION( ADD_F32_L,       FADDL,        4,          3,    VM_REG(f32, output), VM_REG(f32, input), f32 )
VM_INSTRUCTION( ADD_I32_L,       ADDL,         5,          3,    VM_REG(i32, output), VM_REG(i32, input), i32 )
VM_INSTRUCTION( ADD_UI32_L,      UADDL,        6,          3,    VM_REG(ui32, output), VM_REG(ui32, input), ui32 )
VM_INSTRUCTION( SUB_F32,         FSUB,         7,          3,    VM_REG(f32, output), VM_REG(f32, input), VM_REG(f32, input) )
VM_INSTRUCTION( SUB_I32,         SUB,          8,          3,    VM_REG(i32, output), VM_REG(i32, input), VM_REG(i32, input) )
VM_INSTRUCTION( SUB_UI32,        USUB,         9,          3,    VM_REG(ui32, output), VM_REG(ui32, input), VM_REG(ui32, input) )
VM_INSTRUCTION( SUB_F32_L,       FSUBL,        10,         3,    VM_REG(f32, output), VM_REG(f32, input), f32 )
VM_INSTRUCTION( SUB_I32_L,       SUBL,         11,         3,    VM_REG(i32, output), VM_REG(i32, input), i32 )
VM_INSTRUCTION( SUB_UI32_L,      USUBL,        12,         3,    VM_REG(ui32, output), VM_REG(ui32, input), ui32 )
VM_INSTRUCTION( DIV_F32,         FDIV,         13,         3,    VM_REG(f32, output), VM_REG(f32, input), VM_REG(f32, input) )
VM_INSTRUCTION( DIV_I32,         DIV,          14,         3,    VM_REG(i32, output), VM_REG(i32, input), VM_REG(i32, input) )
VM_INSTRUCTION( DIV_UI32,        UDIV,         15,         3,    VM_REG(ui32, output), VM_REG(ui32, input), VM_REG(ui32, input) )
VM_INSTRUCTION( DIV_F32_L,       FDIVL,        16,         3,    VM_REG(f32, output), VM_REG(f32, input), f32 )
VM_INSTRUCTION( DIV_I32_L,       DIVL,         17,         3,    VM_REG(i32, output), VM_REG(i32, input), i32 )
VM_INSTRUCTION( DIV_UI32_L,      UDIVL,        18,         3,    VM_REG(ui32, output), VM_REG(ui32, input), ui32 )
VM_INSTRUCTION( MUL_F32,         FMUL,         19,         3,    VM_REG(f32, output), VM_REG(f32, input), VM_REG(f32, input) )
VM_INSTRUCTION( MUL_I32,         MUL,          20,         3,    VM_REG(i32, output), VM_REG(i32, input), VM_REG(i32, input) )
VM_INSTRUCTION( MUL_UI32,        UMUL,         21,         3,    VM_REG(ui32, output), VM_REG(ui32, input), VM_REG(ui32, input) )
VM_INSTRUCTION( MUL_F32_L,       FMULL,        22,         3,    VM_REG(f32, output), VM_REG(f32, input), f32 )
VM_INSTRUCTION( MUL_I32_L,       MULL,         23,         3,    VM_REG(i32, output), VM_REG(i32, input), i32 )
VM_INSTRUCTION( MUL_UI32_L,      UMULL,        24,         3,    VM_REG(ui32, output), VM_REG(ui32, input), ui32 )
VM_INSTRUCTION( MOD_F32,         FMOD,         25,         3,    VM_REG(f32, output), VM_REG(ui32, input), VM_REG(f32, input) )
VM_INSTRUCTION( MOD_I32,         MOD,          26,         3,    VM_REG(i32, output), VM_REG(ui32, input), VM_REG(i32, input) )
VM_INSTRUCTION( MOD_UI32,        UMOD,         27,         3,    VM_REG(ui32, output), VM_REG(ui32, input), VM_REG(ui32, input) )
VM_INSTRUCTION( MOD_F32_L,       FMODL,        28,         3,    VM_REG(f32, output), VM_REG(f32, input), f32 )
VM_INSTRUCTION( MOD_I32_L,       MODL,         29,         3,    VM_REG(i32, output), VM_REG(i32, input), i32 )
VM_INSTRUCTION( MOD_UI32_L,      UMODL,        30,         3,    VM_REG(ui32, output), VM_REG(ui32, input), ui32 )
VM_INSTRUCTION( NEG_F32,         FNEG,         31,         2,    VM_REG(f32, output), VM_REG(f32, input) )
VM_INSTRUCTION( NEG_I32,         NEG,          32,         2,    VM_REG(i32, output), VM_REG(i32, input) )
VM_INSTRUCTION( NOT_UI32,        UNOT,         33,         2,    VM_REG(ui32, output), VM_REG(ui32, input) )
VM_INSTRUCTION( OR_UI32,         UOR,          34,         3,    VM_REG(ui32, output), VM_REG(ui32, input), VM_REG(ui32, input) )
VM_INSTRUCTION( AND_UI32,        UAND,         35,         3,    VM_REG(ui32, output), VM_REG(ui32, input), VM_REG(ui32, input) )
VM_INSTRUCTION( XOR_UI32,        UXOR,         36,         3,    VM_REG(ui32, output), VM_REG(ui32, input), VM_REG(ui32, input) )
VM_INSTRUCTION( SHR_I32,         SHR,          37,         3,    VM_REG(i32, output), VM_REG(i32, input), VM_REG(i32, input) )
VM_INSTRUCTION( SHR_UI32,        USHR,         38,         3,    VM_REG(ui32, output), VM_REG(ui32, input), VM_REG(ui32, input) )
VM_INSTRUCTION( SHL_I32,         SHL,          39,         3,    VM_REG(i32, output), VM_REG(i32, input), VM_REG(i32, input) )
VM_INSTRUCTION( SHL_UI32,        USHL,         40,         3,    VM_REG(ui32, output), VM_REG(ui32, input), VM_REG(ui32, input) )
VM_INSTRUCTION( OR_UI32_L,       UORL,         41,         3,    VM_REG(ui32, output), VM_REG(ui32, input), ui32 )
VM_INSTRUCTION( AND_UI32_L,      UANDL,        42,         3,    VM_REG(ui32, output), VM_REG(ui32, input), ui32 )
VM_INSTRUCTION( XOR_UI32_L,      UXORL,        43,         3,    VM_REG(ui32, output), VM_REG(ui32, input), ui32 )
VM_INSTRUCTION( SHR_I32_L,       SHRL,         44,         3,    VM_REG(i32, output), VM_REG(i32, input), i32 )
VM_INSTRUCTION( SHR_UI32_L,      USHRL,        45,         3,    VM_REG(ui32, output), VM_REG(ui32, input), ui32 )
VM_INSTRUCTION( SHL_I32_L,       SHLL,         46,         3,    VM_REG(i32, output), VM_REG(i32, input), i32 )
VM_INSTRUCTION( SHL_UI32_L,      USHLL,        47,         3,    VM_REG(ui32, output), VM_REG(ui32, input), ui32 )
VM_INSTRUCTION( ITOUI,           ITOU,         48,         2,    VM_REG(i32, output), VM_REG(ui32, input) )
VM_INSTRUCTION( ITOF,            ITOF,         49,         2,    VM_REG(i32, output), VM_REG(f32, input) )
VM_INSTRUCTION( FTOUI,           FTOU,         50,         2,    VM_REG(f32, output), VM_REG(ui32, input) )
VM_INSTRUCTION( FTOI,            FTOI,         51,         2,    VM_REG(f32, output), VM_REG(i32, input) )
VM_INSTRUCTION( UITOF,           UTOF,         52,         2,    VM_REG(ui32, output), VM_REG(f32, input) )
VM_INSTRUCTION( UITOI,           UTOI,         53,         2,    VM_REG(ui32, output), VM_REG(i32, input) )
VM_INSTRUCTION( CMP_F32,         FCMP,         54,         3,    VM_REG(i32, output), VM_REG(f32, input), VM_REG(f32, input) )
VM_INSTRUCTION( CMP_I32,         CMP,          55,         3,    VM_REG(i32, output), VM_REG(i32, input), VM_REG(i32, input) )
VM_INSTRUCTION( CMP_UI32,        UCMP,         56,         3,    VM_REG(i32, output), VM_REG(ui32, input), VM_REG(ui32, input) )
VM_INSTRUCTION( CMP_F32_L,       FCMPL,        57,         3,    VM_REG(i32, output), VM_REG(f32, input), f32 )
VM_INSTRUCTION( CMP_I32_L,       CMPL,         58,         3,    VM_REG(i32, output), VM_REG(i32, input), i32 )
VM_INSTRUCTION( CMP_UI32_L,      UCMPL,        59,         3,    VM_REG(i32, output), VM_REG(ui32, input), ui32 )
VM_INSTRUCTION( RCMP_F32,        RFCMP,        60,         3,    VM_REG(i32, output), VM_REG(f32, input), VM_REG(f32, input) )
VM_INSTRUCTION( RCMP_I32,        RCMP,         61,         3,    VM_REG(i32, output), VM_REG(i32, input), VM_REG(i32, input) )
VM_INSTRUCTION( RCMP_UI32,       RUCMP,        62,         3,    VM_REG(i32, output), VM_REG(ui32, input), VM_REG(ui32, input) )
VM_INSTRUCTION( RCMP_F32_L,      RFCMPL,       63,         3,    VM_REG(i32, output), VM_REG(f32, input), f32 )
VM_INSTRUCTION( RCMP_I32_L,      RCMPL,        64,         3,    VM_REG(i32, output), VM_REG(i32, input), i32 )
VM_INSTRUCTION( RCMP_UI32_L,     RUCMPL,       65,         3,    VM_REG(i32, output), VM_REG(ui32, input), ui32 )
VM_INSTRUCTION( JNZ,             JNZ,          66,         2,    VM_REG(i32, input), VM_REG(i32, input) )
VM_INSTRUCTION( JEZ,             JEZ,          67,         2,    VM_REG(i32, input), VM_REG(i32, input) )
VM_INSTRUCTION( JGTE,            JGTE,         68,         2,    VM_REG(i32, input), VM_REG(i32, input) )
VM_INSTRUCTION( JLTE,            JLTE,         69,         2,    VM_REG(i32, input), VM_REG(i32, input) )
VM_INSTRUCTION( JLT,             JLT,          70,         2,    VM_REG(i32, input), VM_REG(i32, input) )
VM_INSTRUCTION( JGT,             JGT,          71,         2,    VM_REG(i32, input), VM_REG(i32, input) )
VM_INSTRUCTION( JUMP,            JUMP,         72,         1,    VM_REG(i32, input) )
VM_INSTRUCTION( JNZ_L,           JNZL,         73,         2,    VM_REG(i32, input), i32 )
VM_INSTRUCTION( JEZ_L,           JEZL,         74,         2,    VM_REG(i32, input), i32 )
VM_INSTRUCTION( JGTE_L,          JGTEL,        75,         2,    VM_REG(i32, input), i32 )
VM_INSTRUCTION( JLTE_L,          JLTEL,        76,         2,    VM_REG(i32, input), i32 )
VM_INSTRUCTION( JLT_L,           JLTL,         77,         2,    VM_REG(i32, input), i32 )
VM_INSTRUCTION( JGT_L,           JGTL,         78,         2,    VM_REG(i32, input), i32 )
VM_INSTRUCTION( JUMP_L,          JUMPL,        79,         1,    i32 )
VM_INSTRUCTION( STORE,           STORE,        80,         2,    VM_REG(i32, input), VM_REG(value, input) )
VM_INSTRUCTION( STORE_L,         STOREL,       81,         2,    i32, VM_REG(value, input) )
VM_INSTRUCTION( GET,             GET,          82,         2,    VM_REG(value, output), VM_REG(i32, input) )
VM_INSTRUCTION( GET_L,           GETL,         83,         2,    VM_REG(value, output), i32 )
VM_INSTRUCTION( PUSH,            PUSH,         84,         1,    ui32 )
VM_INSTRUCTION( POP,             POP,          85,         1,    ui32 )
VM_INSTRUCTION( LOAD,            LOAD,         86,         2,    VM_REG(value, output), value )
VM_INSTRUCTION( MOVE,            MOV,          87,         2,    VM_REG(value, output), VM_REG(value, input) )
VM_INSTRUCTION( CALL,            CALL,         88,         2,    i32, ui32 )
VM_INSTRUCTION( CALL_D,          CALLD,        89,         2,    VM_REG(i32, input), VM_REG(ui32, input) )
VM_INSTRUCTION( RETURN,          RETURN,       90,         1,    VM_REG(value, input) )
VM_INSTRUCTION( ALLOC,           ALLOC,        91,         2,    VM_REG(i32, output), VM_REG(ui32, input) )
VM_INSTRUCTION( ALLOC_L,         ALLOCL,       92,         2,    VM_REG(i32, output), ui32 )
VM_INSTRUCTION( FREE,            FREE,         93,         1,    VM_REG(i32, input) )
VM_INSTRUCTION( PEEK8,           PEEK8,        94,         3,    VM_REG(value, output), VM_REG(i32, input), VM_REG(ui32, input) )
VM_INSTRUCTION( PEEK16,          PEEK16,       95,         3,    VM_REG(value, output), VM_REG(i32, input), VM_REG(ui32, input) )
VM_INSTRUCTION( PEEK32,          PEEK32,       96,         3,    VM_REG(value, output), VM_REG(i32, input), VM_REG(ui32, input) )
VM_INSTRUCTION( POKE8,           POKE8,        97,         3,    VM_REG(i32, input), VM_REG(ui32, input), VM_REG(value, input) )
VM_INSTRUCTION( POKE16,          POKE16,       98,         3,    VM_REG(i32, input), VM_REG(ui32, input), VM_REG(value, input) )
VM_INSTRUCTION( POKE32,          POKE32,       99,         3,    VM_REG(i32, input), VM_REG(ui32, input), VM_REG(value, input) )
VM_INSTRUCTION( PEEK8_L,         PEEK8L,       100,        3,    VM_REG(value, output), VM_REG(i32, input), ui32 )
VM_INSTRUCTION( PEEK16_L,        PEEK16L,      101,        3,    VM_REG(value, output), VM_REG(i32, input), ui32 )
VM_INSTRUCTION( PEEK32_L,        PEEK32L,      102,        3,    VM_REG(value, output), VM_REG(i32, input), ui32 )
VM_INSTRUCTION( POKE8_L,         POKE8L,       103,        3,    VM_REG(i32, input), ui32, VM_REG(value, input) )
VM_INSTRUCTION( POKE16_L,        POKE16L,      104,        3,    VM_REG(i32, input), ui32, VM_REG(value, input) )
VM_INSTRUCTION( POKE32_L,        POKE32L,      105,        3,    VM_REG(i32, input), ui32, VM_REG(value, input) )
VM_INSTRUCTION( MEMMOVE,         MEMMOVE,      106,        5,    VM_REG(ui32, input), VM_REG(ui32, input), VM_REG(ui32, input), VM_REG(ui32, input), VM_REG(ui32, input) )
VM_INSTRUCTION( MEMMOVE_L,       MEMMOVEL,     107,        5,    VM_REG(ui32, input), VM_REG(ui32, input), VM_REG(ui32, input), VM_REG(ui32, input), VM_REG(ui32, input) )
VM_INSTRUCTION( LOGAND,          LOGAND,       108,        3,    VM_REG(value, output), VM_REG(value, input), VM_REG(value, input) )
VM_INSTRUCTION( LOGOR,           LOGOR,        109,        3,    VM_REG(value, output), VM_REG(value, input), VM_REG(value, input) )
VM_INSTRUCTION( TRAP,            TRAP,         110,        0     )
VM_INSTRUCTION( SWAP,            SWAP,         111,        2,    VM_REG(value, inout), VM_REG(value, inout) )
VM_INSTRUCTION( MEMDUP,          MEMDUP,       112,        2,    VM_REG(ui32, output), VM_REG(ui32, input) )
VM_INSTRUCTION( MEMLEN,          MEMLEN,       113,        2,    VM_REG(ui32, output), VM_REG(ui32, input) )
